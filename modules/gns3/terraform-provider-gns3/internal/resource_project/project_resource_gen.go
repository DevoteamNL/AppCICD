// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_project

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ProjectResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"auto_close": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"auto_open": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"auto_start": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"drawing_grid_size": schema.Int64Attribute{
				Optional: true,
				Computed: true,
			},
			"filename": schema.StringAttribute{
				Computed: true,
			},
			"grid_size": schema.Int64Attribute{
				Optional: true,
				Computed: true,
			},
			"id": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"path": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"project_id": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"scene_height": schema.Int64Attribute{
				Optional: true,
				Computed: true,
			},
			"scene_width": schema.Int64Attribute{
				Optional: true,
				Computed: true,
			},
			"show_grid": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"show_interface_labels": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"show_layers": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"snap_to_grid": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"status": schema.StringAttribute{
				Computed:            true,
				Description:         "Supported project statuses.",
				MarkdownDescription: "Supported project statuses.",
			},
			"supplier": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"logo": schema.StringAttribute{
						Required:            true,
						Description:         "Path to the project supplier logo",
						MarkdownDescription: "Path to the project supplier logo",
					},
					"url": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Validators: []validator.String{
							stringvalidator.LengthBetween(1, 2083),
						},
					},
				},
				CustomType: SupplierType{
					ObjectType: types.ObjectType{
						AttrTypes: SupplierValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"variables": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							Required:            true,
							Description:         "Variable name",
							MarkdownDescription: "Variable name",
						},
						"value": schema.StringAttribute{
							Optional: true,
							Computed: true,
						},
					},
					CustomType: VariablesType{
						ObjectType: types.ObjectType{
							AttrTypes: VariablesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional: true,
				Computed: true,
			},
			"zoom": schema.Int64Attribute{
				Optional: true,
				Computed: true,
			},
		},
	}
}

type ProjectModel struct {
	AutoClose           types.Bool    `tfsdk:"auto_close"`
	AutoOpen            types.Bool    `tfsdk:"auto_open"`
	AutoStart           types.Bool    `tfsdk:"auto_start"`
	DrawingGridSize     types.Int64   `tfsdk:"drawing_grid_size"`
	Filename            types.String  `tfsdk:"filename"`
	GridSize            types.Int64   `tfsdk:"grid_size"`
	Id                  types.String  `tfsdk:"id"`
	Name                types.String  `tfsdk:"name"`
	Path                types.String  `tfsdk:"path"`
	ProjectId           types.String  `tfsdk:"project_id"`
	SceneHeight         types.Int64   `tfsdk:"scene_height"`
	SceneWidth          types.Int64   `tfsdk:"scene_width"`
	ShowGrid            types.Bool    `tfsdk:"show_grid"`
	ShowInterfaceLabels types.Bool    `tfsdk:"show_interface_labels"`
	ShowLayers          types.Bool    `tfsdk:"show_layers"`
	SnapToGrid          types.Bool    `tfsdk:"snap_to_grid"`
	Status              types.String  `tfsdk:"status"`
	Supplier            SupplierValue `tfsdk:"supplier"`
	Variables           types.List    `tfsdk:"variables"`
	Zoom                types.Int64   `tfsdk:"zoom"`
}

var _ basetypes.ObjectTypable = SupplierType{}

type SupplierType struct {
	basetypes.ObjectType
}

func (t SupplierType) Equal(o attr.Type) bool {
	other, ok := o.(SupplierType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SupplierType) String() string {
	return "SupplierType"
}

func (t SupplierType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	logoAttribute, ok := attributes["logo"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logo is missing from object`)

		return nil, diags
	}

	logoVal, ok := logoAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logo expected to be basetypes.StringValue, was: %T`, logoAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return nil, diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SupplierValue{
		Logo:  logoVal,
		Url:   urlVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewSupplierValueNull() SupplierValue {
	return SupplierValue{
		state: attr.ValueStateNull,
	}
}

func NewSupplierValueUnknown() SupplierValue {
	return SupplierValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSupplierValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SupplierValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SupplierValue Attribute Value",
				"While creating a SupplierValue value, a missing attribute value was detected. "+
					"A SupplierValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SupplierValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SupplierValue Attribute Type",
				"While creating a SupplierValue value, an invalid attribute value was detected. "+
					"A SupplierValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SupplierValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SupplierValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SupplierValue Attribute Value",
				"While creating a SupplierValue value, an extra attribute value was detected. "+
					"A SupplierValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SupplierValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSupplierValueUnknown(), diags
	}

	logoAttribute, ok := attributes["logo"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logo is missing from object`)

		return NewSupplierValueUnknown(), diags
	}

	logoVal, ok := logoAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logo expected to be basetypes.StringValue, was: %T`, logoAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return NewSupplierValueUnknown(), diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return NewSupplierValueUnknown(), diags
	}

	return SupplierValue{
		Logo:  logoVal,
		Url:   urlVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewSupplierValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SupplierValue {
	object, diags := NewSupplierValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSupplierValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SupplierType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSupplierValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSupplierValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSupplierValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSupplierValueMust(SupplierValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SupplierType) ValueType(ctx context.Context) attr.Value {
	return SupplierValue{}
}

var _ basetypes.ObjectValuable = SupplierValue{}

type SupplierValue struct {
	Logo  basetypes.StringValue `tfsdk:"logo"`
	Url   basetypes.StringValue `tfsdk:"url"`
	state attr.ValueState
}

func (v SupplierValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["logo"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["url"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Logo.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["logo"] = val

		val, err = v.Url.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SupplierValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SupplierValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SupplierValue) String() string {
	return "SupplierValue"
}

func (v SupplierValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"logo": basetypes.StringType{},
			"url":  basetypes.StringType{},
		},
		map[string]attr.Value{
			"logo": v.Logo,
			"url":  v.Url,
		})

	return objVal, diags
}

func (v SupplierValue) Equal(o attr.Value) bool {
	other, ok := o.(SupplierValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Logo.Equal(other.Logo) {
		return false
	}

	if !v.Url.Equal(other.Url) {
		return false
	}

	return true
}

func (v SupplierValue) Type(ctx context.Context) attr.Type {
	return SupplierType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SupplierValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"logo": basetypes.StringType{},
		"url":  basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = VariablesType{}

type VariablesType struct {
	basetypes.ObjectType
}

func (t VariablesType) Equal(o attr.Type) bool {
	other, ok := o.(VariablesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t VariablesType) String() string {
	return "VariablesType"
}

func (t VariablesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return VariablesValue{
		Name:  nameVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewVariablesValueNull() VariablesValue {
	return VariablesValue{
		state: attr.ValueStateNull,
	}
}

func NewVariablesValueUnknown() VariablesValue {
	return VariablesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewVariablesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (VariablesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing VariablesValue Attribute Value",
				"While creating a VariablesValue value, a missing attribute value was detected. "+
					"A VariablesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VariablesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid VariablesValue Attribute Type",
				"While creating a VariablesValue value, an invalid attribute value was detected. "+
					"A VariablesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VariablesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("VariablesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra VariablesValue Attribute Value",
				"While creating a VariablesValue value, an extra attribute value was detected. "+
					"A VariablesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra VariablesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewVariablesValueUnknown(), diags
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewVariablesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewVariablesValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewVariablesValueUnknown(), diags
	}

	return VariablesValue{
		Name:  nameVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewVariablesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) VariablesValue {
	object, diags := NewVariablesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewVariablesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t VariablesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewVariablesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewVariablesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewVariablesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewVariablesValueMust(VariablesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t VariablesType) ValueType(ctx context.Context) attr.Value {
	return VariablesValue{}
}

var _ basetypes.ObjectValuable = VariablesValue{}

type VariablesValue struct {
	Name  basetypes.StringValue `tfsdk:"name"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v VariablesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v VariablesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v VariablesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v VariablesValue) String() string {
	return "VariablesValue"
}

func (v VariablesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"name":  basetypes.StringType{},
			"value": basetypes.StringType{},
		},
		map[string]attr.Value{
			"name":  v.Name,
			"value": v.Value,
		})

	return objVal, diags
}

func (v VariablesValue) Equal(o attr.Value) bool {
	other, ok := o.(VariablesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v VariablesValue) Type(ctx context.Context) attr.Type {
	return VariablesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v VariablesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"name":  basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}
