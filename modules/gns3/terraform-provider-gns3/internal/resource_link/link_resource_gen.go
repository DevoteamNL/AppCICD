// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_link

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func LinkResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"capture_compute_id": schema.StringAttribute{
				Computed: true,
			},
			"capture_file_name": schema.StringAttribute{
				Computed: true,
			},
			"capture_file_path": schema.StringAttribute{
				Computed: true,
			},
			"capturing": schema.BoolAttribute{
				Computed: true,
			},
			"filters": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{},
				CustomType: FiltersType{
					ObjectType: types.ObjectType{
						AttrTypes: FiltersValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"id": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"link_id": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"link_style": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"color": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"type": schema.Int64Attribute{
						Optional: true,
						Computed: true,
					},
					"width": schema.Int64Attribute{
						Optional: true,
						Computed: true,
					},
				},
				CustomType: LinkStyleType{
					ObjectType: types.ObjectType{
						AttrTypes: LinkStyleValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"link_type": schema.StringAttribute{
				Computed:            true,
				Description:         "Link type.",
				MarkdownDescription: "Link type.",
			},
			"nodes": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"adapter_number": schema.Int64Attribute{
							Required: true,
						},
						"label": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"rotation": schema.Int64Attribute{
									Optional: true,
									Computed: true,
									Validators: []validator.Int64{
										int64validator.Between(-359, 360),
									},
								},
								"style": schema.StringAttribute{
									Optional: true,
									Computed: true,
								},
								"text": schema.StringAttribute{
									Required: true,
								},
								"x": schema.Int64Attribute{
									Optional: true,
									Computed: true,
								},
								"y": schema.Int64Attribute{
									Optional: true,
									Computed: true,
								},
							},
							CustomType: LabelType{
								ObjectType: types.ObjectType{
									AttrTypes: LabelValue{}.AttributeTypes(ctx),
								},
							},
							Optional:            true,
							Computed:            true,
							Description:         "Label data.",
							MarkdownDescription: "Label data.",
						},
						"node_id": schema.StringAttribute{
							Required: true,
						},
						"port_number": schema.Int64Attribute{
							Required: true,
						},
					},
					CustomType: NodesType{
						ObjectType: types.ObjectType{
							AttrTypes: NodesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Required: true,
				Validators: []validator.List{
					listvalidator.SizeBetween(2, 2),
				},
			},
			"project_id": schema.StringAttribute{
				Computed: true,
			},
			"suspend": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
		},
	}
}

type LinkModel struct {
	CaptureComputeId types.String   `tfsdk:"capture_compute_id"`
	CaptureFileName  types.String   `tfsdk:"capture_file_name"`
	CaptureFilePath  types.String   `tfsdk:"capture_file_path"`
	Capturing        types.Bool     `tfsdk:"capturing"`
	Filters          FiltersValue   `tfsdk:"filters"`
	Id               types.String   `tfsdk:"id"`
	LinkId           types.String   `tfsdk:"link_id"`
	LinkStyle        LinkStyleValue `tfsdk:"link_style"`
	LinkType         types.String   `tfsdk:"link_type"`
	Nodes            types.List     `tfsdk:"nodes"`
	ProjectId        types.String   `tfsdk:"project_id"`
	Suspend          types.Bool     `tfsdk:"suspend"`
}

var _ basetypes.ObjectTypable = FiltersType{}

type FiltersType struct {
	basetypes.ObjectType
}

func (t FiltersType) Equal(o attr.Type) bool {
	other, ok := o.(FiltersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t FiltersType) String() string {
	return "FiltersType"
}

func (t FiltersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return FiltersValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewFiltersValueNull() FiltersValue {
	return FiltersValue{
		state: attr.ValueStateNull,
	}
}

func NewFiltersValueUnknown() FiltersValue {
	return FiltersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewFiltersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (FiltersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing FiltersValue Attribute Value",
				"While creating a FiltersValue value, a missing attribute value was detected. "+
					"A FiltersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FiltersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid FiltersValue Attribute Type",
				"While creating a FiltersValue value, an invalid attribute value was detected. "+
					"A FiltersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FiltersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("FiltersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra FiltersValue Attribute Value",
				"While creating a FiltersValue value, an extra attribute value was detected. "+
					"A FiltersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra FiltersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewFiltersValueUnknown(), diags
	}

	if diags.HasError() {
		return NewFiltersValueUnknown(), diags
	}

	return FiltersValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewFiltersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) FiltersValue {
	object, diags := NewFiltersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewFiltersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t FiltersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewFiltersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewFiltersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewFiltersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewFiltersValueMust(FiltersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t FiltersType) ValueType(ctx context.Context) attr.Value {
	return FiltersValue{}
}

var _ basetypes.ObjectValuable = FiltersValue{}

type FiltersValue struct {
	state attr.ValueState
}

func (v FiltersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v FiltersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v FiltersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v FiltersValue) String() string {
	return "FiltersValue"
}

func (v FiltersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{},
		map[string]attr.Value{})

	return objVal, diags
}

func (v FiltersValue) Equal(o attr.Value) bool {
	other, ok := o.(FiltersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v FiltersValue) Type(ctx context.Context) attr.Type {
	return FiltersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v FiltersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}

var _ basetypes.ObjectTypable = LinkStyleType{}

type LinkStyleType struct {
	basetypes.ObjectType
}

func (t LinkStyleType) Equal(o attr.Type) bool {
	other, ok := o.(LinkStyleType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LinkStyleType) String() string {
	return "LinkStyleType"
}

func (t LinkStyleType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	colorAttribute, ok := attributes["color"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`color is missing from object`)

		return nil, diags
	}

	colorVal, ok := colorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`color expected to be basetypes.StringValue, was: %T`, colorAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.Int64Value, was: %T`, typeAttribute))
	}

	widthAttribute, ok := attributes["width"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`width is missing from object`)

		return nil, diags
	}

	widthVal, ok := widthAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`width expected to be basetypes.Int64Value, was: %T`, widthAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LinkStyleValue{
		Color:         colorVal,
		LinkStyleType: typeVal,
		Width:         widthVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewLinkStyleValueNull() LinkStyleValue {
	return LinkStyleValue{
		state: attr.ValueStateNull,
	}
}

func NewLinkStyleValueUnknown() LinkStyleValue {
	return LinkStyleValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLinkStyleValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LinkStyleValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LinkStyleValue Attribute Value",
				"While creating a LinkStyleValue value, a missing attribute value was detected. "+
					"A LinkStyleValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinkStyleValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LinkStyleValue Attribute Type",
				"While creating a LinkStyleValue value, an invalid attribute value was detected. "+
					"A LinkStyleValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinkStyleValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LinkStyleValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LinkStyleValue Attribute Value",
				"While creating a LinkStyleValue value, an extra attribute value was detected. "+
					"A LinkStyleValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LinkStyleValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLinkStyleValueUnknown(), diags
	}

	colorAttribute, ok := attributes["color"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`color is missing from object`)

		return NewLinkStyleValueUnknown(), diags
	}

	colorVal, ok := colorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`color expected to be basetypes.StringValue, was: %T`, colorAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewLinkStyleValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.Int64Value, was: %T`, typeAttribute))
	}

	widthAttribute, ok := attributes["width"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`width is missing from object`)

		return NewLinkStyleValueUnknown(), diags
	}

	widthVal, ok := widthAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`width expected to be basetypes.Int64Value, was: %T`, widthAttribute))
	}

	if diags.HasError() {
		return NewLinkStyleValueUnknown(), diags
	}

	return LinkStyleValue{
		Color:         colorVal,
		LinkStyleType: typeVal,
		Width:         widthVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewLinkStyleValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LinkStyleValue {
	object, diags := NewLinkStyleValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLinkStyleValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LinkStyleType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLinkStyleValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLinkStyleValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLinkStyleValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLinkStyleValueMust(LinkStyleValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LinkStyleType) ValueType(ctx context.Context) attr.Value {
	return LinkStyleValue{}
}

var _ basetypes.ObjectValuable = LinkStyleValue{}

type LinkStyleValue struct {
	Color         basetypes.StringValue `tfsdk:"color"`
	LinkStyleType basetypes.Int64Value  `tfsdk:"type"`
	Width         basetypes.Int64Value  `tfsdk:"width"`
	state         attr.ValueState
}

func (v LinkStyleValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["color"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["width"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Color.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["color"] = val

		val, err = v.LinkStyleType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		val, err = v.Width.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["width"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LinkStyleValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LinkStyleValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LinkStyleValue) String() string {
	return "LinkStyleValue"
}

func (v LinkStyleValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"color": basetypes.StringType{},
			"type":  basetypes.Int64Type{},
			"width": basetypes.Int64Type{},
		},
		map[string]attr.Value{
			"color": v.Color,
			"type":  v.LinkStyleType,
			"width": v.Width,
		})

	return objVal, diags
}

func (v LinkStyleValue) Equal(o attr.Value) bool {
	other, ok := o.(LinkStyleValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Color.Equal(other.Color) {
		return false
	}

	if !v.LinkStyleType.Equal(other.LinkStyleType) {
		return false
	}

	if !v.Width.Equal(other.Width) {
		return false
	}

	return true
}

func (v LinkStyleValue) Type(ctx context.Context) attr.Type {
	return LinkStyleType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LinkStyleValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"color": basetypes.StringType{},
		"type":  basetypes.Int64Type{},
		"width": basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = NodesType{}

type NodesType struct {
	basetypes.ObjectType
}

func (t NodesType) Equal(o attr.Type) bool {
	other, ok := o.(NodesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t NodesType) String() string {
	return "NodesType"
}

func (t NodesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	adapterNumberAttribute, ok := attributes["adapter_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`adapter_number is missing from object`)

		return nil, diags
	}

	adapterNumberVal, ok := adapterNumberAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`adapter_number expected to be basetypes.Int64Value, was: %T`, adapterNumberAttribute))
	}

	labelAttribute, ok := attributes["label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`label is missing from object`)

		return nil, diags
	}

	labelVal, ok := labelAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`label expected to be basetypes.ObjectValue, was: %T`, labelAttribute))
	}

	nodeIdAttribute, ok := attributes["node_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`node_id is missing from object`)

		return nil, diags
	}

	nodeIdVal, ok := nodeIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`node_id expected to be basetypes.StringValue, was: %T`, nodeIdAttribute))
	}

	portNumberAttribute, ok := attributes["port_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port_number is missing from object`)

		return nil, diags
	}

	portNumberVal, ok := portNumberAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port_number expected to be basetypes.Int64Value, was: %T`, portNumberAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return NodesValue{
		AdapterNumber: adapterNumberVal,
		Label:         labelVal,
		NodeId:        nodeIdVal,
		PortNumber:    portNumberVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewNodesValueNull() NodesValue {
	return NodesValue{
		state: attr.ValueStateNull,
	}
}

func NewNodesValueUnknown() NodesValue {
	return NodesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewNodesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (NodesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing NodesValue Attribute Value",
				"While creating a NodesValue value, a missing attribute value was detected. "+
					"A NodesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NodesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid NodesValue Attribute Type",
				"While creating a NodesValue value, an invalid attribute value was detected. "+
					"A NodesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NodesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("NodesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra NodesValue Attribute Value",
				"While creating a NodesValue value, an extra attribute value was detected. "+
					"A NodesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra NodesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewNodesValueUnknown(), diags
	}

	adapterNumberAttribute, ok := attributes["adapter_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`adapter_number is missing from object`)

		return NewNodesValueUnknown(), diags
	}

	adapterNumberVal, ok := adapterNumberAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`adapter_number expected to be basetypes.Int64Value, was: %T`, adapterNumberAttribute))
	}

	labelAttribute, ok := attributes["label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`label is missing from object`)

		return NewNodesValueUnknown(), diags
	}

	labelVal, ok := labelAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`label expected to be basetypes.ObjectValue, was: %T`, labelAttribute))
	}

	nodeIdAttribute, ok := attributes["node_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`node_id is missing from object`)

		return NewNodesValueUnknown(), diags
	}

	nodeIdVal, ok := nodeIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`node_id expected to be basetypes.StringValue, was: %T`, nodeIdAttribute))
	}

	portNumberAttribute, ok := attributes["port_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port_number is missing from object`)

		return NewNodesValueUnknown(), diags
	}

	portNumberVal, ok := portNumberAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port_number expected to be basetypes.Int64Value, was: %T`, portNumberAttribute))
	}

	if diags.HasError() {
		return NewNodesValueUnknown(), diags
	}

	return NodesValue{
		AdapterNumber: adapterNumberVal,
		Label:         labelVal,
		NodeId:        nodeIdVal,
		PortNumber:    portNumberVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewNodesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) NodesValue {
	object, diags := NewNodesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewNodesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t NodesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewNodesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewNodesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewNodesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewNodesValueMust(NodesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t NodesType) ValueType(ctx context.Context) attr.Value {
	return NodesValue{}
}

var _ basetypes.ObjectValuable = NodesValue{}

type NodesValue struct {
	AdapterNumber basetypes.Int64Value  `tfsdk:"adapter_number"`
	Label         basetypes.ObjectValue `tfsdk:"label"`
	NodeId        basetypes.StringValue `tfsdk:"node_id"`
	PortNumber    basetypes.Int64Value  `tfsdk:"port_number"`
	state         attr.ValueState
}

func (v NodesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["adapter_number"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["label"] = basetypes.ObjectType{
		AttrTypes: LabelValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["node_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["port_number"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.AdapterNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["adapter_number"] = val

		val, err = v.Label.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["label"] = val

		val, err = v.NodeId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["node_id"] = val

		val, err = v.PortNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["port_number"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v NodesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v NodesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v NodesValue) String() string {
	return "NodesValue"
}

func (v NodesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var label basetypes.ObjectValue

	if v.Label.IsNull() {
		label = types.ObjectNull(
			LabelValue{}.AttributeTypes(ctx),
		)
	}

	if v.Label.IsUnknown() {
		label = types.ObjectUnknown(
			LabelValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Label.IsNull() && !v.Label.IsUnknown() {
		label = types.ObjectValueMust(
			LabelValue{}.AttributeTypes(ctx),
			v.Label.Attributes(),
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"adapter_number": basetypes.Int64Type{},
			"label": basetypes.ObjectType{
				AttrTypes: LabelValue{}.AttributeTypes(ctx),
			},
			"node_id":     basetypes.StringType{},
			"port_number": basetypes.Int64Type{},
		},
		map[string]attr.Value{
			"adapter_number": v.AdapterNumber,
			"label":          label,
			"node_id":        v.NodeId,
			"port_number":    v.PortNumber,
		})

	return objVal, diags
}

func (v NodesValue) Equal(o attr.Value) bool {
	other, ok := o.(NodesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AdapterNumber.Equal(other.AdapterNumber) {
		return false
	}

	if !v.Label.Equal(other.Label) {
		return false
	}

	if !v.NodeId.Equal(other.NodeId) {
		return false
	}

	if !v.PortNumber.Equal(other.PortNumber) {
		return false
	}

	return true
}

func (v NodesValue) Type(ctx context.Context) attr.Type {
	return NodesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v NodesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"adapter_number": basetypes.Int64Type{},
		"label": basetypes.ObjectType{
			AttrTypes: LabelValue{}.AttributeTypes(ctx),
		},
		"node_id":     basetypes.StringType{},
		"port_number": basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = LabelType{}

type LabelType struct {
	basetypes.ObjectType
}

func (t LabelType) Equal(o attr.Type) bool {
	other, ok := o.(LabelType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LabelType) String() string {
	return "LabelType"
}

func (t LabelType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	rotationAttribute, ok := attributes["rotation"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rotation is missing from object`)

		return nil, diags
	}

	rotationVal, ok := rotationAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rotation expected to be basetypes.Int64Value, was: %T`, rotationAttribute))
	}

	styleAttribute, ok := attributes["style"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`style is missing from object`)

		return nil, diags
	}

	styleVal, ok := styleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`style expected to be basetypes.StringValue, was: %T`, styleAttribute))
	}

	textAttribute, ok := attributes["text"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`text is missing from object`)

		return nil, diags
	}

	textVal, ok := textAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`text expected to be basetypes.StringValue, was: %T`, textAttribute))
	}

	xAttribute, ok := attributes["x"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`x is missing from object`)

		return nil, diags
	}

	xVal, ok := xAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`x expected to be basetypes.Int64Value, was: %T`, xAttribute))
	}

	yAttribute, ok := attributes["y"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`y is missing from object`)

		return nil, diags
	}

	yVal, ok := yAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`y expected to be basetypes.Int64Value, was: %T`, yAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LabelValue{
		Rotation: rotationVal,
		Style:    styleVal,
		Text:     textVal,
		X:        xVal,
		Y:        yVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewLabelValueNull() LabelValue {
	return LabelValue{
		state: attr.ValueStateNull,
	}
}

func NewLabelValueUnknown() LabelValue {
	return LabelValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLabelValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LabelValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LabelValue Attribute Value",
				"While creating a LabelValue value, a missing attribute value was detected. "+
					"A LabelValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LabelValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LabelValue Attribute Type",
				"While creating a LabelValue value, an invalid attribute value was detected. "+
					"A LabelValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LabelValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LabelValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LabelValue Attribute Value",
				"While creating a LabelValue value, an extra attribute value was detected. "+
					"A LabelValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LabelValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLabelValueUnknown(), diags
	}

	rotationAttribute, ok := attributes["rotation"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rotation is missing from object`)

		return NewLabelValueUnknown(), diags
	}

	rotationVal, ok := rotationAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rotation expected to be basetypes.Int64Value, was: %T`, rotationAttribute))
	}

	styleAttribute, ok := attributes["style"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`style is missing from object`)

		return NewLabelValueUnknown(), diags
	}

	styleVal, ok := styleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`style expected to be basetypes.StringValue, was: %T`, styleAttribute))
	}

	textAttribute, ok := attributes["text"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`text is missing from object`)

		return NewLabelValueUnknown(), diags
	}

	textVal, ok := textAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`text expected to be basetypes.StringValue, was: %T`, textAttribute))
	}

	xAttribute, ok := attributes["x"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`x is missing from object`)

		return NewLabelValueUnknown(), diags
	}

	xVal, ok := xAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`x expected to be basetypes.Int64Value, was: %T`, xAttribute))
	}

	yAttribute, ok := attributes["y"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`y is missing from object`)

		return NewLabelValueUnknown(), diags
	}

	yVal, ok := yAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`y expected to be basetypes.Int64Value, was: %T`, yAttribute))
	}

	if diags.HasError() {
		return NewLabelValueUnknown(), diags
	}

	return LabelValue{
		Rotation: rotationVal,
		Style:    styleVal,
		Text:     textVal,
		X:        xVal,
		Y:        yVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewLabelValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LabelValue {
	object, diags := NewLabelValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLabelValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LabelType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLabelValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLabelValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLabelValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLabelValueMust(LabelValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LabelType) ValueType(ctx context.Context) attr.Value {
	return LabelValue{}
}

var _ basetypes.ObjectValuable = LabelValue{}

type LabelValue struct {
	Rotation basetypes.Int64Value  `tfsdk:"rotation"`
	Style    basetypes.StringValue `tfsdk:"style"`
	Text     basetypes.StringValue `tfsdk:"text"`
	X        basetypes.Int64Value  `tfsdk:"x"`
	Y        basetypes.Int64Value  `tfsdk:"y"`
	state    attr.ValueState
}

func (v LabelValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["rotation"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["style"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["text"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["x"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["y"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.Rotation.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["rotation"] = val

		val, err = v.Style.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["style"] = val

		val, err = v.Text.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["text"] = val

		val, err = v.X.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["x"] = val

		val, err = v.Y.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["y"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LabelValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LabelValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LabelValue) String() string {
	return "LabelValue"
}

func (v LabelValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"rotation": basetypes.Int64Type{},
			"style":    basetypes.StringType{},
			"text":     basetypes.StringType{},
			"x":        basetypes.Int64Type{},
			"y":        basetypes.Int64Type{},
		},
		map[string]attr.Value{
			"rotation": v.Rotation,
			"style":    v.Style,
			"text":     v.Text,
			"x":        v.X,
			"y":        v.Y,
		})

	return objVal, diags
}

func (v LabelValue) Equal(o attr.Value) bool {
	other, ok := o.(LabelValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Rotation.Equal(other.Rotation) {
		return false
	}

	if !v.Style.Equal(other.Style) {
		return false
	}

	if !v.Text.Equal(other.Text) {
		return false
	}

	if !v.X.Equal(other.X) {
		return false
	}

	if !v.Y.Equal(other.Y) {
		return false
	}

	return true
}

func (v LabelValue) Type(ctx context.Context) attr.Type {
	return LabelType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LabelValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"rotation": basetypes.Int64Type{},
		"style":    basetypes.StringType{},
		"text":     basetypes.StringType{},
		"x":        basetypes.Int64Type{},
		"y":        basetypes.Int64Type{},
	}
}
